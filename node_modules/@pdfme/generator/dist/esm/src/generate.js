var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as pdfLib from '@pdfme/pdf-lib';
import * as fontkit from 'fontkit';
import { checkGenerateProps } from '@pdfme/common';
import { builtInPlugins } from '@pdfme/schemas';
import { drawEmbeddedPage, getEmbeddedPagesAndEmbedPdfBoxes } from './pdfUtils';
import { TOOL_NAME } from './constants';
const preprocessing = ({ template }) => __awaiter(void 0, void 0, void 0, function* () {
    const { basePdf } = template;
    const pdfDoc = yield pdfLib.PDFDocument.create();
    // @ts-ignore
    pdfDoc.registerFontkit(fontkit);
    const pagesAndBoxes = yield getEmbeddedPagesAndEmbedPdfBoxes({ pdfDoc, basePdf });
    const { embeddedPages, embedPdfBoxes } = pagesAndBoxes;
    return { pdfDoc, embeddedPages, embedPdfBoxes };
});
const postProcessing = ({ pdfDoc }) => {
    pdfDoc.setProducer(TOOL_NAME);
    pdfDoc.setCreator(TOOL_NAME);
};
const generate = (props) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    checkGenerateProps(props);
    const { inputs, template, options = {}, plugins: userPlugins = {} } = props;
    const { pdfDoc, embeddedPages, embedPdfBoxes } = yield preprocessing({ template });
    const plugins = Object.values(userPlugins).length > 0 ? userPlugins : builtInPlugins;
    const _cache = new Map();
    for (let i = 0; i < inputs.length; i += 1) {
        const inputObj = inputs[i];
        const keys = Object.keys(inputObj);
        for (let j = 0; j < embeddedPages.length; j += 1) {
            const embeddedPage = embeddedPages[j];
            const { width: pageWidth, height: pageHeight } = embeddedPage;
            const embedPdfBox = embedPdfBoxes[j];
            const page = pdfDoc.addPage([pageWidth, pageHeight]);
            drawEmbeddedPage({ page, embeddedPage, embedPdfBox });
            for (let l = 0; l < keys.length; l += 1) {
                const key = keys[l];
                const schemaObj = template.schemas[j];
                const schema = schemaObj[key];
                const value = inputObj[key];
                if (!schema || !value) {
                    continue;
                }
                const render = (_a = Object.values(plugins).find((plugin) => plugin.propPanel.defaultSchema.type === schema.type)) === null || _a === void 0 ? void 0 : _a.pdf;
                if (!render) {
                    throw new Error(`[@pdfme/generator] Renderer for type ${schema.type} not found.
Check this document: https://pdfme.com/docs/custom-schemas`);
                }
                yield render({ value, schema, pdfLib, pdfDoc, page, options, _cache });
            }
        }
    }
    postProcessing({ pdfDoc });
    return pdfDoc.save();
});
export default generate;
//# sourceMappingURL=generate.js.map